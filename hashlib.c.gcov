        -:    0:Source:hashlib.c
        -:    0:Graph:hashlib.gcno
        -:    0:Data:hashlib.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include"hashlib.h"
        -:    3:
        -:    4:
        -:    5:
        -:    6://---------------------------------hash function-----------------------------------
        -:    7:
       26:    8:int get_hash_BLOB(Data data, size_t table_size/*, HT_ERR* err*/) {
       26:    9:    int hash = 0;
       26:   10:    size_t iterator = data.size/table_size+1;
       26:   11:    char* c_data = (char*)data.arr;
        -:   12:
      120:   13:    for (int i = 0; i < data.size; i+=iterator) {
       94:   14:        hash = (hash+(i+3)*c_data[i])%table_size;
        -:   15:    }
       26:   16:    return hash;
        -:   17:}
        -:   18:
        -:   19:
        -:   20:
        -:   21://---------------------------------insert_element-----------------------------------
        -:   22:// Копирует из ptr1 в ptr2 и выделяет память
       17:   23:int copy(void* ptr1, void** ptr2, size_t size, HTERR *err){
       17:   24:    if((*ptr2 = malloc(size)) == NULL && err != NULL) {
    #####:   25:        return -1;
        -:   26:    }
       17:   27:    char* c_ptr1 = (char*)ptr1;
       17:   28:    char* c_ptr2 = (char*)*ptr2;
      262:   29:    for(int i = 0; i < size; i++)
      245:   30:        c_ptr2[i] = c_ptr1[i]; 
       17:   31:    return 0;
        -:   32:}
        -:   33:
       18:   34:void htable_insert(TABLE* TABLE, Data d, HTERR *err) {
       18:   35:    if(err != NULL) *err = HTERR_SUCCESS;
       18:   36:    if(err != NULL && TABLE == NULL) {
        1:   37:        *err = HTERR_INVPTR;
        1:   38:        return;
        -:   39:    }
       17:   40:    int hash = get_hash_BLOB(d, TABLE->table_size);
       17:   41:    LList* list = TABLE->table[hash];
        -:   42:    LList* new;
       17:   43:    if((new = (LList*)malloc(sizeof(LList))) == NULL && err != NULL) {
    #####:   44:        *err = HTERR_INV_ALLOC_MEM;
    #####:   45:        return;
        -:   46:    }
        -:   47:    
       17:   48:    if(copy(d.arr, &(new->data.arr), d.size, err) != 0){
    #####:   49:        *err = HTERR_INV_ALLOC_MEM;
    #####:   50:        return;
        -:   51:    }
        -:   52:
       52:   53:    while(list != NULL && list->next != NULL) {
       18:   54:        list = list->next;
        -:   55:    }
       17:   56:    if(list != NULL) {
       13:   57:        TABLE->number_collisions++;
       13:   58:        list->next = new;
       13:   59:        list->next->prev = list;
       13:   60:        list = list->next;
       13:   61:        list->next = NULL;
        -:   62:    } else {
        4:   63:        TABLE->table[hash] = new;
        4:   64:        list = new;
        4:   65:        list->next = NULL;
        4:   66:        list->prev = NULL;
        -:   67:    }    
       17:   68:    list->data.size = d.size;
        -:   69:}
        -:   70:
        -:   71://-------------------------------printing table--------------------------------
        -:   72:
        -:   73://выводит хеш таблицу
        3:   74:void htable_print(TABLE* TABLE, HTERR *err) {
        3:   75:    if(err != NULL) *err = HTERR_SUCCESS;
        3:   76:    if(err != NULL && TABLE == NULL) {
        1:   77:        *err = HTERR_INVPTR;
        1:   78:        return;
        -:   79:    }
        -:   80:    LList* x;
       10:   81:    for(int i = 0; i < TABLE->table_size; i++) {
        8:   82:        x = TABLE->table[i];
        8:   83:        printf("for hash %i:\n", i);
       47:   84:        while(x != NULL) {
      437:   85:            for(int i = 0; i < x->data.size; i++) {
      406:   86:                printf("%i, ",((char *)x->data.arr)[i]);
        -:   87:            }
       31:   88:            x = x->next;
       31:   89:            printf("\n");
        -:   90:        }
        -:   91:    }
        -:   92:}
        -:   93:
        -:   94://-------------------------------Creating Table---------------------------------
        -:   95:
        -:   96:// Выделяется память под основной массив/фиксируется размер таблицы
        1:   97:TABLE* create_hash_table(size_t table_size, HTERR *err) {
        1:   98:    if(err != NULL) *err = HTERR_SUCCESS;
        -:   99:    TABLE* T;
        1:  100:    if((T = (TABLE*)malloc(sizeof(TABLE))) == NULL && err != NULL) {
    #####:  101:        *err = HTERR_INV_ALLOC_MEM;
    #####:  102:        return NULL;
        -:  103:    }
        1:  104:    T->table_size = table_size;
        1:  105:    T->number_collisions = 0;
        1:  106:    if((T->table = (LList**) malloc(table_size*sizeof(LList*))) == NULL && err != NULL) {
    #####:  107:        *err = HTERR_INV_ALLOC_MEM;
    #####:  108:        return NULL;
        -:  109:    }
        5:  110:    for(int i = 0; i < table_size; i++)
        4:  111:        T->table[i] = NULL;
        1:  112:    return T;
        -:  113:}
        -:  114:
        -:  115://-----------------------------Searching Element---------------------------------
        -:  116://Сравнивает data1, data2 возвращает 0 в случае равенства -1 в противном случае
       20:  117:int compare_data(Data d1, Data d2) {
       20:  118:    if(d1.size != d2.size)
       14:  119:        return -1;
        6:  120:    char* arr1 = (char*)d1.arr;
        6:  121:    char* arr2 = (char*)d2.arr;
      117:  122:    for(size_t i = 0; i < d1.size; i++)
      112:  123:        if(arr1[i] != arr2[i])
        1:  124:            return -1;
        5:  125:    return 0;
        -:  126:}
        -:  127:
        8:  128:LList** htable_search_List(TABLE* TABLE, Data d) {
        8:  129:    LList** candidate_ptr = &TABLE->table[get_hash_BLOB(d, TABLE->table_size)];
        8:  130:    LList* candidate = *candidate_ptr;
       31:  131:    while(candidate != NULL) {
       20:  132:        if(compare_data((candidate)->data, d) == 0)
        5:  133:            return candidate_ptr;
       15:  134:        candidate = (candidate)->next;
       15:  135:        candidate_ptr = &(candidate);
        -:  136:    }
        3:  137:    return NULL;
        -:  138:}
        -:  139:
        -:  140://Возвращает указатель на сохраненные в таблице данные и NULL в случае, если в таблице таких данных нет
        4:  141:Data* htable_search(TABLE* TABLE, Data d, HTERR* err) {
        4:  142:    if(err != NULL) *err = HTERR_SUCCESS;
        4:  143:    if(err != NULL && TABLE == NULL) {
        1:  144:        *err = HTERR_INVPTR;
        1:  145:        return NULL;
        -:  146:    }
        -:  147:
        3:  148:    LList** l = htable_search_List(TABLE, d);
        3:  149:    if(l != NULL)
        2:  150:        return &((*l)->data);
        1:  151:    return NULL;
        -:  152:}
        -:  153:
        -:  154://------------------------------Removing element---------------------------------
        6:  155:int htable_remove_element(TABLE* TABLE, Data d, HTERR *err) {
        6:  156:    if(err != NULL) *err = HTERR_SUCCESS;
        6:  157:    if(err != NULL && TABLE == NULL) {
        1:  158:        *err = HTERR_INVPTR;
        1:  159:        return -1;
        -:  160:    }
        -:  161:
        5:  162:    LList** l = htable_search_List(TABLE, d);
        -:  163:
        5:  164:    if( l == NULL ) {
        2:  165:        *err = HTERR_NO_SUCH_ELEM;
        2:  166:        return -1;
        -:  167:    }
        -:  168:
        3:  169:    if((*l)->prev != NULL || (*l)->next != NULL)
        3:  170:        TABLE->number_collisions--;
        -:  171:
        3:  172:    if((*l)->prev != NULL)
        2:  173:        (*l)->prev->next = (*l)->next;
        -:  174:    
        3:  175:    if((*l)->next != NULL)
        2:  176:        (*l)->next->prev = (*l)->prev;
        -:  177:
        3:  178:    LList* k = *l;
        3:  179:    if((*l)->prev == NULL && (*l)->next != NULL)
        1:  180:        TABLE->table[get_hash_BLOB(d, TABLE->table_size)] = ((*l)->next);
        3:  181:    free((k)->data.arr);
        3:  182:    free((k));
        -:  183:    //(k) = NULL;
        3:  184:    return 0;
        -:  185:}
        -:  186:
        -:  187:
        -:  188://------------------------------Removing Table-----------------------------------
        2:  189:void htable_remove(TABLE* TABLE, HTERR *err) {
        2:  190:    if(err != NULL) *err = HTERR_SUCCESS;
        2:  191:    if(err != NULL && TABLE == NULL) {
        1:  192:        *err = HTERR_INVPTR;
        1:  193:        return;
        -:  194:    }
        -:  195:    LList *x, *y;
        5:  196:    for(int i = 0; i < TABLE->table_size; i++) {
        4:  197:        x = TABLE->table[i];
       22:  198:        while(x != NULL) {
       14:  199:            free(x->data.arr);
       14:  200:            y = x;
       14:  201:            x = x->next;
       14:  202:            free(y);
        -:  203:        }
        -:  204:    }
        1:  205:    free(TABLE->table);
        1:  206:    free(TABLE);
        -:  207:}
